name: Build & Deploy to Prod

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write   # for GHCR
  id-token: write

jobs:
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - name: bitsgiga-client
            context: prod/bitsgiga-client
          - name: bitsgiga-api
            context: prod/bitshub-server

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & Push ${{ matrix.service.name }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          push: true
          tags: |
            ghcr.io/${{ secrets.GHCR_USERNAME }}/${{ matrix.service.name }}:main
            ghcr.io/${{ secrets.GHCR_USERNAME }}/${{ matrix.service.name }}:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ secrets.GHCR_USERNAME }}/${{ matrix.service.name }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ secrets.GHCR_USERNAME }}/${{ matrix.service.name }}:buildcache,mode=max

  deploy:
    name: Deploy to Prod
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: SSH into server & deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          port: ${{ secrets.DEPLOY_PORT }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            set -euo pipefail
            cd /srv/projects/bitsgiga/prod
            # pull newest images tagged :main and recreate only changed containers
            docker compose pull bitsgiga-client bitsgiga-api
            docker compose up -d bitsgiga-client bitsgiga-api
            # prune old image layers (optional)
            docker image prune -f --filter "until=240h" || true
